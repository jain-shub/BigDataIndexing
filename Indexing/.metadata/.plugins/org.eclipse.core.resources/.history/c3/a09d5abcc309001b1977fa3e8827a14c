package com.developer.bigdataindexing;

import org.springframework.web.bind.annotation.RestController;

import redis.clients.jedis.Jedis;

import java.util.HashSet;
import java.util.Set;

import org.apache.commons.codec.digest.DigestUtils;
import org.everit.json.schema.Schema;
import org.everit.json.schema.loader.SchemaLoader;
import org.json.JSONObject;
import org.json.JSONTokener;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
//import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
@RequestMapping("/plan")
public class BigDataIndexingController {

	
	private Jedis jedis = new Jedis();
	private JSONParser jsonParser = new JSONParser();

	@RequestMapping("/")
	public String index() {
		return "Greetings from Spring Boot!";
	}

	@PostMapping("/test/add")
	public void testAdd(){
		jedis.set("abc", "{'message': 'This is test!'}");
	}

	@GetMapping("/test/get")
	public ResponseEntity<String> testGet(){

		return ResponseEntity.status(HttpStatus.OK)
				.body(jedis.get("abc"));

	}
	
	@PostMapping("/add")
	public ResponseEntity<JSONObject> add(@RequestBody String plan){
//		@RequestHeader("ETag") String eTagVal, 
		String eTag = null;

//		if(eTagVal==null) {
			eTag = eTagGen(plan);
//		}
//		else {
//			eTag = eTagVal;
			if(jedis.get(eTag)!=null) {
				return ResponseEntity.status(HttpStatus.NOT_MODIFIED)
						.eTag(eTag)
						.body(new JSONObject("{'message': 'Plan provided is already present in database!', 'status':'304'}"));
			}
			else {
				eTag = eTagGen(plan);
			}
//		}

		JSONObject json = null;
		try {
			json = (JSONObject)jsonParser.parse(plan);

			if(jsonValidator(json)) {
				jedis.set(eTag, plan);
			}
			else {
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).
						body(new JSONObject("{'message':'JSON validation failed for the input provided', 'status':'400'}"));
			}

		} catch (ParseException e) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).
					body(new JSONObject("{'message':'JSON parsing failed for the input provided', 'status':'400'}"));		
		}

		return ResponseEntity.status(HttpStatus.OK)
				.eTag(eTag)
				.body(json);


		//		return planRep.findById(plan.getString("objectId"));
	}

	public String eTagGen(String plan) {
		String eTag = new DigestUtils("SHA3-256").digestAsHex(plan);
		System.out.println(eTag);
		return eTag;
	}

	public static boolean jsonValidator(JSONObject jsonObject) {
		JSONObject jsonSchema = new JSONObject(
				new JSONTokener(BigDataIndexingApplication.class.getResourceAsStream("./schema.json")));
		JSONObject jsonSubject = new JSONObject(
				new JSONTokener(jsonObject.toString()));

		Schema schema = SchemaLoader.load(jsonSchema);
		try {
			schema.validate(jsonSubject);
			System.out.println("Validation Successful");
			return true;
		}
		catch (Exception e) {
			System.out.println("Validation exception occured");
			return false;
		}
	}

	public Set<JSONObject> findAll(){
		Set<String> sets = jedis.keys("*");
		Set<JSONObject> resultSet = new HashSet<>(); 
		if (!CollectionUtils.isEmpty(sets)) {
			for (String key : sets) {
				JSONObject result;
				try {
					result = (JSONObject)jsonParser.parse(jedis.get(key));
					resultSet.add(result);

				} catch (ParseException e) {
					return null;
				}
			}
		}
		return resultSet;
	}

	@GetMapping("/get/{id}")
	public ResponseEntity<JSONObject> getById(@RequestHeader(value = "ETag") String headerETag,@PathVariable("objectId") final String id) {
		JSONObject json = null;
		String eTag = null;
		if(headerETag!=null) {
			String currentPlan = jedis.get(headerETag);
			if(currentPlan!=null) {
				return ResponseEntity.status(HttpStatus.NOT_MODIFIED)
						.eTag(headerETag)
						.body(new JSONObject("{'message': 'Plan requested is had not been modified!', 'status':'304'}"));
			}
			else {
				return ResponseEntity.status(HttpStatus.NO_CONTENT)
						.body(new JSONObject("{'message':'No entry found for provided key, it has either been deleted or updated', 'status':'204'}"));
			}
		}
		else {
			Set<String> sets = jedis.keys("*");
			if (!CollectionUtils.isEmpty(sets)) {
				for (String key : sets) {
					JSONObject result;
					try {
						result = (JSONObject)jsonParser.parse(jedis.get(key));

						if(result.getString("objectId").equals(id)) {
							json = result;
							eTag = key;
						}
						else {
							return ResponseEntity.status(HttpStatus.NO_CONTENT)
									.body(new JSONObject("{'message':'No entry found for provided key, it has either been deleted or updated', 'status':'204'}"));
						}
					} catch (ParseException e) {
						return ResponseEntity.status(HttpStatus.BAD_REQUEST)
								.body(new JSONObject("{'message':'JSON parsing failed for the input provided', 'status':'400'}"));
					}
				}
			}
		}
		return ResponseEntity.status(HttpStatus.OK)
				.eTag(eTag)
				.body(json);
		//		return planRep.findById(id);
	}


	@DeleteMapping("/delete/{id}")
	public ResponseEntity<JSONObject> delete(@RequestHeader("ETag") String eTagVal, @PathVariable("objectId") final String id) {
		if(eTagVal==null) {
			return ResponseEntity.status(HttpStatus.NO_CONTENT)
					.body(new JSONObject("{'message':'No entry found for provided key, it has either been deleted or updated', 'status':'204'}"));
		}
		else {
			jedis.del(eTagVal);
		}
		return ResponseEntity.status(HttpStatus.OK).body(new JSONObject(findAll()));
	}
}
